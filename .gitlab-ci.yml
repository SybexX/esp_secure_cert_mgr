stages:
  - build
  - qemu_test

variables:
  BATCH_BUILD: "1"
  V: "0"
  MAKEFLAGS: "-j5 --no-keep-going"
  GIT_SUBMODULE_STRATEGY: recursive
  QEMU_IMAGE: ${CI_DOCKER_REGISTRY}/qemu-v5.2:2-20230522

# before each job, we need to check if this job is filtered by bot stage/job filter
.apply_bot_filter: &apply_bot_filter
  python $APPLY_BOT_FILTER_SCRIPT || exit 0

.setup_env:
  before_script: &setup_env
    # apply bot filter in before script
    - *apply_bot_filter
    # add gitlab ssh key
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GITLAB_KEY > ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git --version
    - git submodule update --init --recursive

# Base build template with common configuration
.build_base:
  stage: build
  before_script: *setup_env
  tags:
    - build
  variables:
    PEDANTIC_FLAGS: "-Werror -Werror=unused-variable -Werror=unused-but-set-variable -Werror=unused-function"
    EXTRA_CFLAGS: "${PEDANTIC_FLAGS}"
    EXTRA_CXXFLAGS: "${PEDANTIC_FLAGS}"
  script:
    - export EXTRA_CFLAGS=$EXTRA_CFLAGS
    - export EXTRA_CXXFLAGS=$EXTRA_CXXFLAGS
    - export ROOT_PATH=$PWD
    - cd $ROOT_PATH/test_apps
    - pip install -r $ROOT_PATH/test_apps/qemu_test/requirements.txt
    - idf-ci build run --target $IDF_TARGET -m "qemu"
  artifacts:
    paths:
      - test_apps/build_${IDF_TARGET}_${CONFIG}
    expire_in: 1 hour

# Build templates for different IDF versions
.build_v4.3:
  extends: .build_base
  image: espressif/idf:release-v4.3
  parallel:
    matrix:
      - IDF_TARGET: [esp32, esp32c3]
        CONFIG: [default, tlv, legacy]

.build_v4.4:
  extends: .build_base
  image: espressif/idf:release-v4.4
  parallel:
    matrix:
      - IDF_TARGET: [esp32, esp32c3]
        CONFIG: [default, tlv, legacy]

.build_v5.0:
  extends: .build_base
  image: espressif/idf:release-v5.0
  parallel:
    matrix:
      - IDF_TARGET: [esp32, esp32c3]
        CONFIG: [default, tlv, legacy]

.build_v5.1:
  extends: .build_base
  image: espressif/idf:release-v5.1
  parallel:
    matrix:
      - IDF_TARGET: [esp32, esp32c3]
        CONFIG: [default, tlv, legacy]

.build_v5.2:
  extends: .build_base
  image: espressif/idf:release-v5.2
  parallel:
    matrix:
      - IDF_TARGET: [esp32, esp32c3]
        CONFIG: [default, tlv, legacy]

.build_v5.3:
  extends: .build_base
  image: espressif/idf:release-v5.3
  parallel:
    matrix:
      - IDF_TARGET: [esp32, esp32c3]
        CONFIG: [default, tlv, legacy]

.build_v5.4:
  extends: .build_base
  image: espressif/idf:release-v5.4
  parallel:
    matrix:
      - IDF_TARGET: [esp32, esp32c3]
        CONFIG: [default, tlv, legacy]

.build_v5.5:
  extends: .build_base
  image: espressif/idf:release-v5.5
  parallel:
    matrix:
      - IDF_TARGET: [esp32, esp32c3]
        CONFIG: [default, tlv, legacy]

.build_master:
  extends: .build_base
  image: espressif/idf:latest
  parallel:
    matrix:
      - IDF_TARGET: [esp32c3]
        CONFIG: [default, tlv, legacy]

# Build jobs for each IDF version
build_v4.3:
  extends: .build_v4.3
  script:
    - export EXTRA_CFLAGS=$EXTRA_CFLAGS
    - export EXTRA_CXXFLAGS=$EXTRA_CXXFLAGS
    - export ROOT_PATH=$PWD
    - cd $ROOT_PATH/test_apps
    - grep -v "idf-ci" $ROOT_PATH/test_apps/qemu_test/requirements.txt | pip install -r /dev/stdin
    - idf-build-apps build --config "sdkconfig.defaults=default" --target $IDF_TARGET --build-dir "build_${IDF_TARGET}_${CONFIG}" -p .

build_v4.4:
  extends: .build_v4.4

build_v5.0:
  extends: .build_v5.0

build_v5.1:
  extends: .build_v5.1

build_v5.2:
  extends: .build_v5.2

build_v5.3:
  extends: .build_v5.3

build_v5.4:
  extends: .build_v5.4

build_v5.5:
  extends: .build_v5.5

build_master:
  extends: .build_master

# Build job for examples app sanity test
build_examples_app_master:
  extends: .build_master
  image: espressif/idf:latest
  variables:
    IDF_TARGET: esp32c3
    CONFIG: default
  script:
    - export EXTRA_CFLAGS=$EXTRA_CFLAGS
    - export EXTRA_CXXFLAGS=$EXTRA_CXXFLAGS
    - export ROOT_PATH=$PWD
    - cd $ROOT_PATH/examples/esp_secure_cert_app
    - pip install -r $ROOT_PATH/test_apps/qemu_test/requirements.txt
    - idf-ci build run --target $IDF_TARGET
  artifacts:
    paths:
      - examples/esp_secure_cert_app/build_${IDF_TARGET}_${CONFIG}
    expire_in: 1 hour

# Base QEMU test template
.qemu_test_base:
  stage: qemu_test
  tags:
    - qemu_test
  script:
    - export EXTRA_CFLAGS=$EXTRA_CFLAGS
    - export EXTRA_CXXFLAGS=$EXTRA_CXXFLAGS
    - export ROOT_PATH=$PWD
    - . $IDF_PATH/export.sh
    - cd $ROOT_PATH/test_apps
    - pip install -r $ROOT_PATH/test_apps/qemu_test/requirements.txt
    - export BUILD_DIR="build_${IDF_TARGET}_${CONFIG}"
    - pytest --target $IDF_TARGET --app-path $ROOT_PATH/test_apps --build-dir $BUILD_DIR --embedded-services idf,qemu -s -m qemu --sdkconfig $CONFIG

# QEMU test jobs for legacy flash format
qemu_test_legacy:
  extends: .qemu_test_base
  image: espressif/idf:release-v5.2
  parallel:
    matrix:
      - IDF_TARGET: [esp32c3]
        CONFIG: [legacy]
        TEST_NAME: [cust_flash, nvs, nvs_legacy, cust_flash_legacy]
  script:
    - export EXTRA_CFLAGS=$EXTRA_CFLAGS
    - export EXTRA_CXXFLAGS=$EXTRA_CXXFLAGS
    - export ROOT_PATH=$PWD
    - . $IDF_PATH/export.sh
    - cd $ROOT_PATH/test_apps
    - pip install -r $ROOT_PATH/test_apps/qemu_test/requirements.txt
    - export BUILD_DIR="build_${IDF_TARGET}_${CONFIG}"
    - pytest --target $IDF_TARGET --app-path $ROOT_PATH/test_apps --build-dir $BUILD_DIR --embedded-services idf,qemu -s -m qemu --sdkconfig $CONFIG -k "test_esp_secure_cert_${TEST_NAME}_qemu"
  dependencies:
    - build_v5.2

# QEMU test jobs for each ESP-IDF version
qemu_test_v5.1:
  extends: .qemu_test_base
  image: espressif/idf:release-v5.1
  parallel:
    matrix:
      - IDF_TARGET: [esp32c3, esp32]
        CONFIG: [tlv]
  dependencies:
    - build_v5.1

qemu_test_v5.2:
  extends: .qemu_test_base
  image: espressif/idf:release-v5.2
  parallel:
    matrix:
      - IDF_TARGET: [esp32c3, esp32]
        CONFIG: [tlv]
  dependencies:
    - build_v5.2

qemu_test_v5.3:
  extends: .qemu_test_base
  image: espressif/idf:release-v5.3
  parallel:
    matrix:
      - IDF_TARGET: [esp32c3, esp32]
        CONFIG: [tlv]
  dependencies:
    - build_v5.3

qemu_test_v5.4:
  extends: .qemu_test_base
  image: espressif/idf:release-v5.4
  parallel:
    matrix:
      - IDF_TARGET: [esp32c3, esp32]
        CONFIG: [tlv]
  dependencies:
    - build_v5.4

qemu_test_v5.5:
  extends: .qemu_test_base
  image: espressif/idf:release-v5.5
  parallel:
    matrix:
      - IDF_TARGET: [esp32c3, esp32]
        CONFIG: [tlv]
  dependencies:
    - build_v5.5

qemu_test_master:
  extends: .qemu_test_base
  image: espressif/idf:latest
  parallel:
    matrix:
      - IDF_TARGET: [esp32c3]
        CONFIG: [tlv]
  dependencies:
    - build_master

# QEMU test for examples app sanity test
qemu_test_examples_app_master:
  stage: qemu_test
  image: espressif/idf:latest
  tags:
    - qemu_test
  variables:
    IDF_TARGET: esp32c3
    CONFIG: default
  script:
    - export EXTRA_CFLAGS=$EXTRA_CFLAGS
    - export EXTRA_CXXFLAGS=$EXTRA_CXXFLAGS
    - export ROOT_PATH=$PWD
    - . $IDF_PATH/export.sh
    - cd $ROOT_PATH/examples/esp_secure_cert_app
    - pip install -r $ROOT_PATH/test_apps/qemu_test/requirements.txt
    - export BUILD_DIR="build_${IDF_TARGET}_${CONFIG}"
    # Run the sanity test from examples app
    - pytest test_esp_secure_cert.py --target $IDF_TARGET --app-path . --build-dir $BUILD_DIR --embedded-services idf,qemu -s -m qemu
  dependencies:
    - build_examples_app_master
